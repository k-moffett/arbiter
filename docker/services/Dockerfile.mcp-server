# Multi-stage Dockerfile for Arbiter MCP Server
# Provides JSON-RPC context API for agent coordination
# Targets: development, builder, production

# =============================================================================
# Stage 1: Development
# =============================================================================
FROM node:22-alpine AS development

LABEL maintainer="Arbiter MCP Server"
LABEL description="Development environment for MCP context server"

WORKDIR /app

# Install system dependencies
RUN apk add --no-cache \
    curl \
    bash \
    htop

# Copy package files
COPY package*.json ./

# Install all dependencies (dev + production)
RUN npm ci

# Copy source code (for hot reload in development)
COPY src/ ./src/
COPY tsconfig.json ./

# Set Node.js memory limits
ENV NODE_OPTIONS="--max-old-space-size=2048"

# Expose MCP server port
EXPOSE 3100

# Health check
HEALTHCHECK --interval=30s --timeout=10s --retries=3 --start-period=40s \
  CMD node -e "fetch('http://localhost:3100/health').then(r => r.ok ? process.exit(0) : process.exit(1)).catch(() => process.exit(1))"

# Default command for development
CMD ["npx", "tsx", "watch", "src/_services/_mcpServer/server.ts"]

# =============================================================================
# Stage 2: Builder
# =============================================================================
FROM node:22-alpine AS builder

LABEL description="Build stage for TypeScript compilation"

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies needed for building
RUN npm ci

# Copy source code
COPY src/ ./src/
COPY tsconfig.json ./

# Build TypeScript to JavaScript
RUN npm run build

# =============================================================================
# Stage 3: Production
# =============================================================================
FROM node:22-alpine AS production

LABEL description="Production runtime for Arbiter MCP Server"

WORKDIR /app

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Install runtime dependencies
RUN apk add --no-cache curl

# Copy built artifacts from builder stage
COPY --from=builder --chown=nodejs:nodejs /app/dist ./dist
COPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nodejs:nodejs /app/package*.json ./

# Switch to non-root user
USER nodejs

# Expose MCP server port
EXPOSE 3100

# Health check (using Node.js fetch API)
HEALTHCHECK --interval=30s --timeout=10s --retries=3 --start-period=40s \
  CMD node -e "fetch('http://localhost:3100/health').then(r => r.ok ? process.exit(0) : process.exit(1)).catch(() => process.exit(1))"

# Production command
CMD ["node", "dist/_services/_mcpServer/server.js"]
