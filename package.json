{
  "name": "arbiter",
  "version": "1.0.0",
  "description": "Domain-agnostic knowledge hub with Discord bot, AI agent, and vector search capabilities",
  "type": "module",
  "private": true,
  "author": "Arbiter Team",
  "license": "MIT",
  "keywords": [
    "discord",
    "bot",
    "mcp",
    "ai",
    "agent",
    "vector-search",
    "knowledge-base",
    "typescript",
    "domain-agnostic"
  ],
  "scripts": {
    "// Development": "=== Development Scripts ===",
    "dev": "npm run start:all",
    "dev:local": "tsx watch src/index.ts",
    "dev:docker": "docker compose up --build",
    "dev:stop": "docker compose down",
    "dev:logs": "docker compose logs -f",
    "dev:up": "docker compose up -d --build",
    "// Build & Production": "=== Build & Production ===",
    "build": "esbuild $(find src -name '*.ts' -type f) --platform=node --format=esm --outdir=dist --packages=external --out-extension:.js=.js && tsc-alias -p tsconfig.json --resolve-full-paths",
    "start": "node dist/index.js",
    "cli": "docker compose -f docker-compose.cli.yml run --rm cli",
    "clean": "rm -rf dist",
    "prebuild": "npm run clean",
    "// Testing": "=== Testing ===",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "test:unit": "jest --testPathPattern=unit",
    "test:integration": "jest --config jest.integration.config.js",
    "// Code Quality": "=== Code Quality ===",
    "lint": "eslint . --fix",
    "lint:fix": "eslint . --fix",
    "typecheck": "tsc --noEmit",
    "format": "prettier --write \"src/**/*.ts\"",
    "format:check": "prettier --check \"src/**/*.ts\"",
    "validate": "npm run typecheck && npm run lint && npm run test",
    "// Docker - Supporting Services": "=== Docker Supporting Services ===",
    "docker:services:up": "docker compose -f docker-compose.services.yml --profile warm up -d",
    "docker:services:up:no-warm": "docker compose -f docker-compose.services.yml up -d",
    "docker:services:down": "docker compose -f docker-compose.services.yml down",
    "docker:services:restart": "docker compose -f docker-compose.services.yml restart",
    "docker:services:logs": "docker compose -f docker-compose.services.yml logs -f",
    "docker:services:ps": "docker compose -f docker-compose.services.yml ps",
    "docker:vllm:up": "docker compose -f docker-compose.services.yml --profile vllm up -d vllm",
    "docker:vllm:down": "docker stop arbiter-vllm && docker rm arbiter-vllm",
    "docker:warm": "docker compose -f docker-compose.services.yml --profile warm up -d ollama-warm && docker compose -f docker-compose.services.yml logs -f ollama-warm",
    "// Docker - Development": "=== Docker Development ===",
    "docker:dev": "docker compose -f docker-compose.dev.yml up",
    "docker:dev:build": "docker compose -f docker-compose.dev.yml build",
    "docker:dev:down": "docker compose -f docker-compose.dev.yml down",
    "// Docker - Agents": "=== Docker Agents ===",
    "docker:agent:up": "docker compose -f docker-compose.agent.yml up -d",
    "docker:agent:down": "docker compose -f docker-compose.agent.yml down",
    "docker:agent:logs": "docker compose -f docker-compose.agent.yml logs -f",
    "docker:agent:build": "docker compose -f docker-compose.agent.yml build",
    "// Docker - Orchestrator": "=== Docker Orchestrator ===",
    "docker:orchestrator:up": "docker compose -f docker-compose.orchestrator.yml up -d",
    "docker:orchestrator:down": "docker compose -f docker-compose.orchestrator.yml down",
    "docker:orchestrator:logs": "docker compose -f docker-compose.orchestrator.yml logs -f",
    "// Docker - MCP Server": "=== Docker MCP Server ===",
    "docker:mcp:up": "docker compose -f docker-compose.mcp.yml up -d",
    "docker:mcp:down": "docker compose -f docker-compose.mcp.yml down",
    "docker:mcp:logs": "docker compose -f docker-compose.mcp.yml logs -f",
    "docker:mcp:ps": "docker compose -f docker-compose.mcp.yml ps",
    "docker:mcp:restart": "docker compose -f docker-compose.mcp.yml restart",
    "// Docker - CLI": "=== Docker CLI ===",
    "docker:cli": "docker compose -f docker-compose.cli.yml run --rm --remove-orphans cli",
    "docker:cli:build": "docker compose -f docker-compose.cli.yml build",
    "docker:cli:rebuild": "npm run docker:cli:build && npm run docker:cli",
    "// Logs": "=== Log Viewing ===",
    "logs:arbiter": "./scripts/logs.sh arbiter",
    "logs:arbiter:cli": "./scripts/logs.sh arbiter arbiter-cli",
    "logs:ollama": "./scripts/logs.sh ollama",
    "logs:all": "./scripts/logs.sh all",
    "logs:json": "./scripts/logs.sh json",
    "// Docker - Testing": "=== Docker Testing ===",
    "docker:test:unit": "docker compose -f docker-compose.dev.yml run --rm agent-dev npm run test:unit",
    "docker:test:integration": "docker compose -f docker-compose.dev.yml run --rm agent-dev npm run test:integration",
    "docker:test:e2e": "docker compose -f docker-compose.cli.yml run --rm cli npm run test:e2e",
    "// Docker - Production": "=== Docker Production ===",
    "docker:build:prod": "docker compose -f docker-compose.prod.yml build",
    "docker:prod:up": "docker compose -f docker-compose.prod.yml up -d",
    "docker:prod:down": "docker compose -f docker-compose.prod.yml down",
    "docker:prod:logs": "docker compose -f docker-compose.prod.yml logs -f",
    "// Docker - Utilities": "=== Docker Utilities ===",
    "docker:mvp": "npm run docker:services:up && npm run docker:mcp:up && npm run docker:health",
    "docker:mvp:down": "npm run docker:mcp:down && npm run docker:services:down",
    "docker:health": "bash docker/scripts/health-check.sh",
    "docker:clean": "docker compose -f docker-compose.services.yml down -v && docker compose -f docker-compose.agent.yml down -v && docker system prune -f",
    "docker:clean:all": "docker compose down -v && docker system prune -af --volumes",
    "// All Services": "=== Start/Stop All Services ===",
    "start:all": "npm run build && docker compose up -d --build && echo '✅ All services started'",
    "stop:all": "docker compose down && echo '✅ All services stopped'",
    "restart:all": "npm run stop:all && npm run start:all",
    "rebuild:all": "npm run build && docker compose build --no-cache && docker compose up -d && echo '✅ All services rebuilt'",
    "status": "docker ps --filter name=arbiter --format 'table {{.Names}}\\t{{.Status}}\\t{{.Ports}}'",
    "logs:services": "docker compose logs -f"
  },
  "dependencies": {
    "@anthropic-ai/sdk": "^0.62.0",
    "@modelcontextprotocol/sdk": "^1.17.5",
    "@qdrant/js-client-rest": "^1.15.1",
    "boxen": "^8.0.1",
    "cli-table3": "^0.6.5",
    "discord.js": "^14.16.3",
    "dotenv": "^16.4.5",
    "dotenv-expand": "^11.0.0",
    "express": "^5.1.0",
    "fast-xml-parser": "^4.5.3",
    "figlet": "^1.9.3",
    "gradient-string": "^3.0.0",
    "inversify": "^7.10.3",
    "nanospinner": "^1.2.2",
    "picocolors": "^1.1.1",
    "pino": "^8.16.0",
    "pino-pretty": "^10.2.3",
    "reflect-metadata": "^0.2.2",
    "uuid": "^13.0.0",
    "wrap-ansi": "^9.0.2",
    "zod": "^4.0.0"
  },
  "overrides": {
    "zod": "^4.0.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.0.0",
    "@jest/globals": "^29.7.0",
    "@types/dockerode": "^3.3.44",
    "@types/express": "^5.0.3",
    "@types/figlet": "^1.7.0",
    "@types/gradient-string": "^1.1.6",
    "@types/jest": "^29.5.14",
    "@types/node": "^22.10.2",
    "@types/uuid": "^11.0.0",
    "@types/wrap-ansi": "^8.0.2",
    "@typescript-eslint/eslint-plugin": "^8.0.0",
    "@typescript-eslint/parser": "^8.0.0",
    "esbuild": "^0.25.11",
    "eslint": "^9.0.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-perfectionist": "^4.0.0",
    "jest": "^29.7.0",
    "prettier": "^3.4.2",
    "ts-jest": "^29.2.5",
    "tsc-alias": "^1.8.16",
    "tsx": "^4.0.0",
    "typescript": "^5.7.2",
    "typescript-eslint": "^8.0.0"
  },
  "engines": {
    "node": ">=22.0.0",
    "npm": ">=10.0.0"
  }
}
